<?php

/**
 * @file
 * Contains all hook implementations for this module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function trpcultivate_phenotypes_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Provides the module overview in the help tab.
    case 'help.page.trpcultivate_phenotypes':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';

      $output .= '<ul>'
        . '<li>' . t('Creates genus-specific Tripal Content Types for Trait pages to provide a landing page for all information about a specific trait. These are specific to the genus to ensure that all data summarized is relevant and to respect that traits to vary between genus in their expression and specific definition.') . '</li>'
        . '<li>' . t('Supports using genus-specific ontologies to ensure you capture each trait fully and mapping of these genus-specific terms to domain and system specific ontologies to enable comparison and data sharing.') . '</li>'
        . '<li>' . t('Focuses on the Trait - Method - Unit formula for describing phenotypic data.') . '</li>'
          . '<ul>'
            . '<li>' . t('This supports collecting all data for a specific trait (e.g. Plant Height) into a single page while still fully describing methodology and units for accurate analysis.') . '</li>'
            . '<li>' . t('For the Plant Height trait, you would have data available for multiple experiments, measurement methodology (e.g highest canopy point, average canopy height in a plot, drone captured height based on NDVI) and units on the same page but they would not be combined across experiment, method or units.') . '</li>'
          .'</ul>'
        . '<li>' . t('A holding space for raw phenotypic data / measurements right after collection which is private by default and sharable with individual accounts. These data are kept outside the main schema for your biological data since they are raw, unpublished results. There is an easy means to backup data, validate and import by season.')
        . '</li>'
      . '</ul>';

      return $output;

    default:
  }
}

/**
 * Tripal Job callback.
 * Job registered during install to insert terms used by configuration
 * page default field values.
 * 
 * @see config/trpcultivate_phenotypes.settings
 */
function trpcultivate_phenotypes_install_ontologyterms() {
  // Create terms defined in config entity.
  \Drupal::service('trpcultivate_phenotypes.terms')
    ->loadTerms();

  // Create genus-ontology configuration.
  \Drupal::service('trpcultivate_phenotypes.genus_ontology')
    ->loadGenusOntology();
}

/**
 * Implements hook_theme().
 * 
 * @see templates in /templates.
 */
function trpcultivate_phenotypes_theme($existing, $type, $theme, $path) {
  $items = [];

  $items = [
    'theme-importer-header' => [
      'variables' => [
        'data' => [
          'stages'  => [],
          'current_stage' => 1,
          'headers' => [],
          'template_file' => '',
        ]
      ],
      'template' => 'trpcultivate-phenotypes-template-importer-header'
    ],
    'theme-accordion' => [
      'variables' => [
        'data' => [
          'stages' => [],
          'current_stage' => 1,
        ]
      ],
      'template' => 'trpcultivate-phenotypes-template-accordion'
    ],
    'header_instructions' => [
      'variables' => [
        'data' => [
          'section' => '',
          'link_01' => '',
          'link_02' => ''
        ]
      ],
      'template' => 'trpcultivate-phenotypes-template-header-instructions'
    ],
    'result_window' => [
      'variables' => [
        'data' => []
      ],
      'template' => 'trpcultivate-phenotypes-template-result-window'
    ],
  ];

  return $items;
}